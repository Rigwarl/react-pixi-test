{"version":3,"sources":["config/bunny.png","Camera.tsx","config/config.component.tsx","config/config.model.ts","App.tsx","index.tsx"],"names":["module","exports","Camera","PixiComponent","create","viewport","Viewport","screenWidth","screenHeight","worldWidth","worldHeight","on","console","log","clamp","direction","drag","pinch","wheel","applyProps","instance","oldProps","newProps","didMount","willUnmount","renderConfigItem","item","type","image","key","id","x","y","parts","map","ConfigRenderer","config","createUnsafeRandomId","Math","random","toString","bunnyPng","App","className","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"4GAAAA,EAAOC,QAAU,IAA0B,mC,4JCoC5BC,EAjCAC,wBAAc,WAAY,CACvCC,OAAQ,WACN,IAAMC,EAAW,IAAIC,IAAS,CAC5BC,YAAa,IACbC,aAAc,IACdC,WAAY,IACZC,YAAa,MAcf,OAVAL,EAASM,GAAG,cAAc,kBAAMC,QAAQC,IAAI,iBAC5CR,EAASM,GAAG,YAAY,kBAAMC,QAAQC,IAAI,eAE1CR,EAASS,MAAM,CAAEC,UAAW,QAC5BV,EACGW,OACAC,QACAC,QAGIb,GAETc,WAAY,SAACC,EAAUC,EAAUC,GAC/BV,QAAQC,IAAI,eAEdU,SAAU,WACRX,QAAQC,IAAI,aAEdW,YAAa,WACXZ,QAAQC,IAAI,kBCxBVY,EAAmB,SAAnBA,EAAoBC,GACxB,MAAkB,WAAdA,EAAKC,KAEL,kBAAC,SAAD,CACEC,MAAOF,EAAKE,MACZC,IAAKH,EAAKI,GACVC,EAAGL,EAAKK,GAAK,EACbC,EAAGN,EAAKM,GAAK,IAMjB,kBAAC,YAAD,CAAWH,IAAKH,EAAKI,GAAIC,EAAGL,EAAKK,GAAK,EAAGC,EAAGN,EAAKM,GAAK,GACnDN,EAAKO,MAAMC,IAAIT,KAKTU,EAAiB,SAAC,GAAD,IAAGC,EAAH,EAAGA,OAAH,OAC5B,kBAAC,YAAD,KACGA,EAAOH,MAAMC,IAAIT,K,iBCNhBY,EAAuB,kBAAMC,KAAKC,SAASC,YAEpCJ,EAAoB,CAC/BH,MAAO,CACL,CACEH,GAAIO,IACJV,KAAM,SACNC,MAAOa,KAET,CACEd,KAAM,UACNG,GAAIO,IACJN,EAAG,IACHE,MAAO,CACL,CACEH,GAAIO,IACJV,KAAM,SACNI,EAAG,IACHH,MAAOa,KAET,CACEX,GAAIO,IACJV,KAAM,SACNI,EAAG,IACHH,MAAOa,SC5BFC,MAZf,WACE,OACE,yBAAKC,UAAU,OACb,kBAAC,QAAD,KACE,kBAAC,EAAD,KACE,kBAAC,EAAD,CAAgBP,OAAQA,QCPlCQ,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,W","file":"static/js/main.6ae32ca5.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/bunny.c2e5d0c0.png\";","import { Viewport } from 'pixi-viewport';\nimport { PixiComponent } from '@inlet/react-pixi';\n\nconst Camera = PixiComponent('Viewport', {\n  create: () => {\n    const viewport = new Viewport({\n      screenWidth: 800,\n      screenHeight: 600,\n      worldWidth: 1000,\n      worldHeight: 800,\n      // ticker: props.app.ticker,\n      // interaction: props.app.renderer.plugins.interaction, // the interaction module is important for wheel to work properly when renderer.view is placed or scaled\n    });\n    viewport.on('drag-start', () => console.log('drag-start'));\n    viewport.on('drag-end', () => console.log('drag-end'));\n    \n    viewport.clamp({ direction: 'all' });\n    viewport\n      .drag()\n      .pinch()\n      .wheel();\n      // .decelerate();\n\n    return viewport;\n  },\n  applyProps: (instance, oldProps, newProps) => {\n    console.log('applyProps');\n  },\n  didMount: () => {\n    console.log('didMount');\n  },\n  willUnmount: () => {\n    console.log('willUnmount');\n  },\n});\n\nexport default Camera;\n","import React from 'react';\nimport { Container, Sprite } from '@inlet/react-pixi';\nimport { AppConfig, Item } from './config.model';\n\ninterface ConfigRendererProps {\n  config: AppConfig;\n}\n\nconst renderConfigItem = (item: Item) => {\n  if (item.type === 'simple') {\n    return (\n      <Sprite\n        image={item.image}\n        key={item.id}\n        x={item.x || 0}\n        y={item.y || 0}\n      />\n    );\n  }\n\n  return (\n    <Container key={item.id} x={item.x || 0} y={item.y || 0}>\n      {item.parts.map(renderConfigItem)}\n    </Container>\n  );\n};\n\nexport const ConfigRenderer = ({ config }: ConfigRendererProps) => (\n  <Container>\n    {config.parts.map(renderConfigItem)}\n  </Container>\n);","import bunnyPng from './bunny.png';\n\nexport interface AbstractItem {\n  type: 'simple' | 'complex';\n  id: string;\n  x?: number;\n\ty?: number;\n}\n\nexport interface SimpleItem extends AbstractItem {\n\ttype: 'simple';\n\timage: string;\n}\n\nexport interface ComplexItem extends AbstractItem {\n\ttype: 'complex';\n\tparts: Item[];\n}\n\nexport type Item = SimpleItem | ComplexItem;\n\nexport type AppConfig = Omit<ComplexItem, 'type' | keyof AbstractItem>;\n\nconst createUnsafeRandomId = () => Math.random().toString();\n\nexport const config: AppConfig = {\n  parts: [\n    {\n      id: createUnsafeRandomId(),\n      type: 'simple',\n      image: bunnyPng,\n    },\n    {\n      type: 'complex',\n      id: createUnsafeRandomId(),\n      x: 250,\n      parts: [\n        {\n          id: createUnsafeRandomId(),\n          type: 'simple',\n          x: 100,\n          image: bunnyPng,\n        },\n        {\n          id: createUnsafeRandomId(),\n          type: 'simple',\n          x: 200,\n          image: bunnyPng,\n        },\n      ],\n    },\n  ],\n};\n","import React from 'react';\nimport { Stage } from '@inlet/react-pixi'\nimport Camera from './Camera';\n\nimport { ConfigRenderer } from './config/config.component';\nimport { config } from './config/config.model';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Stage>\n        <Camera>\n          <ConfigRenderer config={config} />\n        </Camera>\n      </Stage>\n    </div>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}